squared.mean <-mean(square.numbers)
squared.mean # prints the mean of the squared numbers
#Filters the perfect square numbers
squares <- sqrt(number)
round.squares <- round(squares) #rounds the squared numbers to single digits
squares <- number[squares == round.squares] # filters for perfect squares
squares # prints the perfect squared numbers as a vector
################
#### PART 4 #####
#################
#Stores our spring break date
spring.break <- as.Date("March 17 2018", format = "%B%d%Y")
#Figures out today date
today <- Sys.Date()
#Calculate days left until break
days.to.break <- spring.break - today
days.to.break # prints days left till break
# Generate a birthday intro. Takes name, age and Date for arguments.
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(y, format = "%B%d") # formats how birthday date is written
days.left.till <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.left.till < 0) {
days.left <- 365 + days.left.till # adds 365 days if birthday already passed
} else{
days.left <- days.left.till
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
days.left, "days I'll be", new.age)
}
y <- c("April 13") # stores the birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, y)
my.bday.intro # print birthday introduction
my.bday.intro <- print(MakeBirthdayIntro(my.name, my.age, y))
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, y)
RemoveBook <- function(book.list,index){
x <- index      #stores the index
paste(books[x]) # prints the book with book removed
}
books.without.four <- RemoveBook(books,-4) # give specific index and book list to remove
books.without.four <- print(RemoveBook(books,-4)) # give specific index and book list to remove
RemoveBook <- function(book.list,index){
x <- index      #stores the index
return(books[x]) # prints the book with book removed
}
books.without.four <- print(RemoveBook(books,-4)) # give specific index and book list to remove
my.intro <- print(MakeIntroduction(my.name, my.age))
# Makes Casual Intro with name and age
casual.intro <- print(sub("Hello, my name is", "Hey, I'm", my.intro))
print(my.intro)
print(casual.intro)  # prints the casual intro
my.bday.intro <- paste(MakeBirthdayIntro(my.name, my.age, y))
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(y, format = "%B%d") # formats how birthday date is written
days.left.till <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.left.till < 0) {
days.left <- 365 + days.left.till # adds 365 days if birthday already passed
} else{
days.left <- days.left.till
}
new.age <- age + 1 # calculates age in 2018
new.intro <- print("Hello, my name is", name, "and I'm", age,  "years old. In",
days.left, "days I'll be", new.age)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, y)
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(y, format = "%B%d") # formats how birthday date is written
days.left.till <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.left.till < 0) {
days.left <- 365 + days.left.till # adds 365 days if birthday already passed
} else{
days.left <- days.left.till
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
days.left, "days I'll be", new.age)
}
y <- c("April 13") # stores the birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, y)
print(my.bday.intro)
# Generate a birthday intro. Takes name, age and Date for arguments.
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(y, format = "%B%d") # formats how birthday date is written
difference.of.dates <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.left.till < 0) {
days.left <- 365 + difference.of.dates # adds 365 days if birthday already passed
} else{
days.left <- difference.of.dates
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
days.left, "days I'll be", new.age)
}
y <- c("April 13") # stores the specific birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, y)
# Generate a birthday intro. Takes name, age and Date for arguments.
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(y, format = "%B%d") # formats how birthday date is written
difference.of.dates <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(difference.of.dates < 0) {
days.left <- 365 + difference.of.dates # adds 365 days if birthday already passed
} else{
days.left <- difference.of.dates
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
days.left, "days I'll be", new.age)
}
y <- c("April 13") # stores the specific birthday
print(my.bday.intro)
MakeIntroduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "I'm",age,"years old.")
}
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
#################
#### PART 1 #####
#################
#Install stringr libaray
install.packages("stringr")
library("stringr")
my.age <- 19           #my age
my.name <- "Jeongvin"  #my name
#Introduces myself passing name and age as arguement
MakeIntroduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "I'm",age,"years old.")
}
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
# Makes Casual Intro with name and age
casual.intro <- (sub("Hello, my name is", "Hey, I'm", my.intro))
print(casual.intro)  # prints the casual intro
# First letter capitalized introduction
capital.intro <- str_to_title(my.intro)
print(capital.intro)
# Counts the 'e' in the introduction
intro.e.count <- str_count(my.intro, pattern = "e")
print(intro.e.count)
#################
#### PART 2 #####
#################
# Contains 6 books, calls for the first three.
books <- c("The last lecture","Kite Runner", "1989", "The fault in our Stars", "The help", "My Sister's Keeper")
top.three.books <- books[1:3]
print(top.three.books)
# Takes the list of books and gives review
book.reviews <- paste0(books," is a great read!")
print(book.reviews)
#Removes book at a certain index. Passes book list and index
RemoveBook <- function(book.list,index){
return (books[index]) # prints the book with book removed
}
books.without.four <- RemoveBook(books,-4) # give specific index and book list to remove
print(books.without.four)
# Prints books with 15 characters or more
long.titles <- nchar(books) > 15 # filters books with 15 characters or more
long.titles.with.15 <- books[long.titles]
print(long.titles.with.15) # prints the titles that fit the category
#################
#### PART 3 #####
#################
number <- c(1:201)  # stores the number from 1-201
# Squares the numbes above
square.numbers <- sqrt(number)
# Calculates the squared mean of the numbers
squared.mean <-mean(square.numbers)
#Filters the perfect square numbers
round.squares <- round(squares) #rounds the squared numbers to single digits
squares <- number[square.numbers == round.squares] # filters for perfect squares
print(squares)
################
#### PART 4 #####
#################
#Stores our spring break date
spring.break <- as.Date("March 17 2018", format = "%B%d%Y")
#Figures out today date
today <- Sys.Date()
#Calculate days left until break
days.to.break <- spring.break - today
print(days.to.break)
# Generate a birthday intro. Takes name, age and Date for arguments.
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(birth.date, format = "%B%d") # formats how birthday date is written
days.till <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.till < 0) {
N <- 365 + days.till # adds 365 days if birthday already passed
} else{
N <- days.till
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
N, "days I'll be", new.age)
return(new.intro)
}
birth.date <- c("April 13")   #stores the specific birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, birth.date)
print(my.bday.intro)
# Contains 6 books, calls for the first three.
books <- c("The last lecture","Kite Runner","1989","The fault in our Stars","The help","My Sister's Keeper")
top.three.books <- books[1:3]
print(top.three.books)
#Filters the perfect square numbers
round.squares <- round(squares.numbers) #rounds the squared numbers to single digits
# Squares the numbes above
square.numbers <- sqrt(number)
# Calculates the squared mean of the numbers
squared.mean <-mean(square.numbers)
#Filters the perfect square numbers
round.squares <- round(squares.numbers) #rounds the squared numbers to single digits
#Filters the perfect square numbers
round.squares <- round(square.numbers) #rounds the squared numbers to single digits
squares <- number[square.numbers == round.squares] # filters for perfect squares
print(squares)
#Stores our spring break date
spring.break <- as.Date("March 17 2018", format = "%B%d%Y")
#Figures out today date
today <- Sys.Date()
#Calculate days left until break
days.to.break <- spring.break - today
print(days.to.break)
MakeBirthdayIntro <- function(name, age, Date){
Date <- as.Date(birth.date, format = "%B%d") # formats how birthday date is written
days.till <- Date - today #calculates days until birthday
# Test birthday to make sure it won't be negative days
if(days.till < 0) {
N <- 365 + days.till # adds 365 days if birthday already passed
} else{
N <- days.till
}
new.age <- age + 1 # calculates age in 2018
new.intro <- paste("Hello, my name is", name, "and I'm", age,  "years old. In",
N, "days I'll be", new.age)
return(new.intro)
}
birth.date <- c("April 13")   #stores the specific birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, birth.date)
print(my.bday.intro)
birth.date <- c("January 18")   #stores the specific birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, birth.date)
print(my.bday.intro)
return(introduction)
MakeIntroduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "I'm",age,"years old.")
return(introduction)
}
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
return(introduction)
return(introduction)
MakeIntroduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "I'm",age,"years old.")
return(introduction)
}
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
View(nycflights13)
View(head(flights))
View(flights)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
summarize(nrows(flights))
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
new. <- summarize(nrows(flights))
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
new. <- summarize(nrows(flights))
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
new. <- nrow(flights)
new.
ncol(flgihts)
ncol(flights)
colnames(flights)
mutate(flights, amount.time.in.air = air_time)
library('dplyr')
mutate(flights, amount.time.in.air = air_time)
mutate(flights, amount.time.in.air = air_time)
arrange(time.gained)
time.gained <-  mutate(flights, amount.time.in.air = air_time)
arrange(time.gained)
time.gained <-  mutate(flights, amount.time.in.air = arr_delay - dep_delay)
time.gained
View(time.gained)
arrange(time.gained)
arrange.in <-  arrange(time.gained)
View(arrange.in)
arrange.in <-  arrange(time.gained, desc(gain))
arrange.in <-  arrange(time.gained, desc(amount.time.in.air))
View(arrange.in)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
flights <- mutate(flights, gain = arr_delay - dep_delay) %>% arrange(desc(gain))
view(flights)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean - mean(gain, na,rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean - mean(gain, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(gain, na.rm = TRUE))
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
dep.deplay.by.month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay))
dep.deplay.by.month
dep.deplay.by.month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = TRUE))
dep.deplay.by.month
greatest.avg <- flights %>% summarize(max(mean))
filter(flights, greatest = max(mean))
filter(flights, greatest == max(mean))
filter(flights, mean == max(mean))
filter(dep.deplay.by.month, mean == max(mean))
plot(dep.deplay.by.month)
source('~/INFO 201/ch10-dplyr/exercise-5/exercise.R', echo=TRUE)
destination.avg <- flights %>% group_by(dest)
destination.avg <- flights %>% group_by(dest) %>% summarize(highest.avg = mean(dep_delay), na.rm = TRUE)
%>% filter(highest.avg = max(highest.avg))
destination.avg <- flights %>% group_by(dest) %>% summarize(highest.avg = mean(dep_delay), na.rm = TRUE) %>% filter(highest.avg = max(highest.avg))
destination.avg <- flights %>% group_by(dest) %>% summarize(highest.avg = mean(dep_delay), na.rm = TRUE) %>% filter(highest.avg == max(highest.avg))
designation.avg
destination.avg
destination.avg <- flights %>% group_by(dest) %>%
summarize(highest.avg = mean(arr_delay), na.rm = TRUE) %>%
arrange(-highest.avg)
destination.avg
filter(flights, airports == destination.avg)
filter(flights, dest == destination.avg)
filter(flights, dest == destination.avg,)
View(destination.avg)
filter(flights, dest == destination.avg)
aiports <- flights %>%
filter(dest, dest == destination.avg)
aiports <- flights %>%
filter( dest == destination.avg)
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-delay)
arr.delay.by.month
View(destination.avg)
destination.avg <- flights %>% group_by(dest) %>%
summarise(highest.avg = mean(arr_delay), na.rm = TRUE) %>%
arrange(-highest.avg)
destination.avg
destination.avg <- flights %>% group_by(dest) %>%
summarise(highest.avg = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-highest.avg)
destination.avg
aiports <- flights %>%
filter(destination.avg, dest == destination.avg)
aiports <- flights %>%
filter(destination.avg$dest)
aiports <- flights %>%
filter(destination.avg$dest[1])
aiports <- flights %>%
filter(airports, airports == destination.avg)
aiports <- flights %>%
filter(airports, airports == destination.avg[1])
# You can look up these airports in the `airports` data frame!
View(airports)
aiports <- flights %>%
filter(airports, faa == destination.avg[1])
aiports <- filter(airports, faa == arr.delay.by.month$dest[1])
aiports
destination.avg <- flights %>% group_by(dest) %>%
summarise(highest.avg = mean(arr_delay, na.rm = TRUE))
destination.avg <- flights %>% group_by(dest) %>%
summarise(highest.avg = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-highest.avg)
left_join(aiports, destination.avg)
View(airports)
view(destination.avg)
View(destination.avg)
left_join(aiports, destination.avg, by = c("faa" = "dest"))
dep.deplay.by.month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = TRUE))
left_join(airlines, destination, by = 'carrier')
left_join(airlines, dep.deplay.by.month, by = 'carrier')
dep.deplay.by.month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = TRUE)) %>%
arrange(-dep.deplay.by.month)
dep.deplay.by.month
shiny::runApp('info 200/FINAL PROJECT WRANGLING')
setwd("~/info 200/FINAL PROJECT WRANGLING")
runApp()
runApp()
source('merging.R')
setwd("~/info 200/FINAL PROJECT WRANGLING")
source('merging.R')
source('merging.R')
source('merging.R')
source('merging')
source(merging)
source('merging.R')
library('shiny')
library('ggplot2')
library('dplyr')
source('merging.R')
source('app.R')
setwd("~/info 200/FINAL PROJECT WRANGLING")
source('app.R')
source('countries')
source('2017')
setwd("~/INFO 201/info201final")
source('merging.R')
filtered.data <- full.data %>%
filter(Region == inpust$chosen.category)
View(full.data)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?geom_line
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/INFO 201/info201final")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(full.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(full.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
